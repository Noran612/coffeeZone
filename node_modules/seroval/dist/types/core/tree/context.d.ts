import type { BaseParserContext, BaseSerializerContext } from '../context';
export interface ParserReference {
    ids: Map<unknown, number>;
    marked: Set<number>;
}
export interface ParserContext extends BaseParserContext {
    reference: ParserReference;
}
export interface ParserOptions {
    disabledFeatures: number;
}
export declare function createParserContext(options?: Partial<ParserOptions>): ParserContext;
export interface SerializerReference {
    size: number;
    valid: (number | undefined)[];
    marked: Set<number>;
}
export interface SerializerContext extends BaseSerializerContext {
    reference: SerializerReference;
    vars: (string | undefined)[];
}
export interface SerializerOptions {
    markedRefs: number[] | Set<number>;
    features: number;
}
export declare function createSerializerContext(options: SerializerOptions): SerializerContext;
/**
 * Increments the number of references the referenced value has
 */
export declare function markRef(ctx: ParserContext | SerializerContext, current: number): void;
/**
 * Creates the reference param (identifier) from the given reference ID
 * Calling this function means the value has been referenced somewhere
 */
export declare function getRefParam(ctx: SerializerContext, index: number): string;
export declare function createIndexedValue<T>(ctx: ParserContext, current: T): number;
export interface DeserializerContext {
    values: Map<number, unknown>;
    refs: Set<number>;
}
export interface DeserializerOptions {
    markedRefs: number[] | Set<number>;
}
export declare function createDeserializerContext(options: DeserializerOptions): DeserializerContext;
