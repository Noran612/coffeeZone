import type { SerovalNode } from '../types';
import type { ParserOptions } from './context';
export declare function serialize<T>(source: T, options?: Partial<ParserOptions>): string;
export declare function serializeAsync<T>(source: T, options?: Partial<ParserOptions>): Promise<string>;
export declare function deserialize<T>(source: string): T;
export interface SerovalJSON {
    t: SerovalNode;
    f: number;
    m: number[];
}
export declare function toJSON<T>(source: T, options?: Partial<ParserOptions>): SerovalJSON;
export declare function toJSONAsync<T>(source: T, options?: Partial<ParserOptions>): Promise<SerovalJSON>;
export declare function compileJSON(source: SerovalJSON): string;
export declare function fromJSON<T>(source: SerovalJSON): T;
