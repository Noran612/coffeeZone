import type { Assignment, FlaggedObject } from '../assignments';
import type { BaseParserContext } from '../context';
import type { SerovalNode } from '../types';
export interface CrossParserContextOptions {
    scopeId?: string;
    refs?: Map<unknown, number>;
    disabledFeatures?: number;
}
export interface CrossParserContext {
    scopeId?: string;
    refs: Map<unknown, number>;
    features: number;
}
export declare function createCrossParserContext(options?: CrossParserContextOptions): CrossParserContext;
export declare function createCrossIndexedValue<T>(ctx: CrossParserContext, current: T): number;
export interface StreamingCrossParserContextOptions extends CrossParserContextOptions {
    onParse: (node: SerovalNode, initial: boolean) => void;
    onDone?: () => void;
}
export interface StreamingCrossParserContext extends CrossParserContext {
    alive: boolean;
    pending: number;
    onParse(node: SerovalNode, initial: boolean): void;
    onDone(): void;
}
export declare function createStreamingCrossParserContext(options: StreamingCrossParserContextOptions): StreamingCrossParserContext;
export declare function pushPendingState(ctx: StreamingCrossParserContext): void;
export declare function popPendingState(ctx: StreamingCrossParserContext): void;
export interface CrossSerializerContext extends BaseParserContext {
    stack: number[];
    assignments: Assignment[];
    flags: FlaggedObject[];
}
export interface CrossSerializerOptions {
    features: number;
}
export declare function createCrossSerializerContext(options: CrossSerializerOptions): CrossSerializerContext;
